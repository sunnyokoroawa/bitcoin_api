<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bitcoin.API</name>
    </assembly>
    <members>
        <member name="M:Bitcoin.API.Controller.BitcoinController.GetTxOut(Bitcoin.Core.Models.BitcoinCore.GetTxOutRequest)">
            <summary>
            relies on a 3rd party to get txns
            </summary>
            <param name="model"></param>
            <returns></returns>
            <summary>
            this is used to get the value of UTXO in a wallet address
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Bitcoin.API.Controller.BitcoinController.GetBlock(Bitcoin.Core.Models.BitcoinCore.GetBlockRequest)">
            <summary>
            this gets UTXOs by supplying the address
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Bitcoin.API.Controller.RawTransactionController.FundRawtransaction(Bitcoin.Core.Models.BitcoinCore.FundRawtransactionRequest)">
            <remarks>
            options is optional.
            Used to add inputs to a txn until its big enough to meet the value of all its output.
            https://chainquery.com/bitcoin-cli/fundrawtransaction
            </remarks>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Bitcoin.API.Controller.RawTransactionController.AnalyzePsbt(Bitcoin.Core.Models.BitcoinCore.AnalyzePsbtRequest)">
             <remarks>
             Response: it tells you the stage of the multisig txn
             { 
              "inputs": [
                {
                  "has_utxo": true,
                  "is_final": false,
                  "next": "signer",
                  "missing": {
                    "signatures": [
                      "46651ff1ba122a0b5a5271b4d41e6486607dd0e1",
                      "9f5212ef00d43bd69bbea239a54b9dece1f54036",
                      "581025b59cf5739b1b34dfe80edd1a49aa8ae62c"
                    ]
                }
            }
              ],
              "estimated_vsize": 177,
              "estimated_feerate": 0.00001000,
              "fee": 0.00000177,
              "next": "signer"
            }
             </remarks>
             <param name="model"></param>
             <returns></returns>
        </member>
        <member name="M:Bitcoin.API.Controller.RawTransactionController.DecodeScript(Bitcoin.Core.Models.BitcoinCore.DecodeScriptRequest)">
             <summary>
             Response: The redeemScript is called when you createmultisig txn
             {
              "asm": "2 02e494d8511bd695482c1dd0ac306c976168473df24972fb9b988105bb9bf7d8cd 03fa068d09dbd8ce9f996d965b6251ed56b23314db3ce6d7da7cc4ab4adc843454 02b4c3ab0d87ce53dd6107312100b0a4ec9ae73f40aa9787d0256a099d7b68aa24 3 OP_CHECKMULTISIG",
              "type": "multisig",
              "p2sh": "2NBoSMTcXT9Z4KS9aXPDSrk6gxDiKRigQCY",
              "segwit": {
                "asm": "0 a7e3af14fdfda450488a4233c8389fdc91670985fa2f701f73f193b19160efc2",
                "hex": "0020a7e3af14fdfda450488a4233c8389fdc91670985fa2f701f73f193b19160efc2",
                "address": "tb1q5l36798alkj9qjy2ggeuswylmjgkwzv9lghhq8mn7xfmrytqalpqrjc582",
                "type": "witness_v0_scripthash",
                "p2sh-segwit": "2N5NSZb72e3Htjj2DP2GnoEv7kfZ2rSiE8M"
              }
            }
             </summary>
             <param name="model"></param>
             <returns></returns>
        </member>
        <member name="M:Bitcoin.API.Controller.WalletController.GetTransaction(Bitcoin.Core.Models.BitcoinCore.GetTransactionRequest)">
            <summary>
            getTransaction only works for txns treated from your own node. The Bitcoin Core desktop
            wallet does not store the whole txns, it only stores txns done on the node (inflows and outflows) in
            the system's memory.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Bitcoin.API.Controller.WalletController.GetRawChangeAddress(Bitcoin.Core.Models.BitcoinCore.GetRawChangeAddressRequest)">
            <remarks>
            address_type: “legacy”, “p2sh-segwit”, and “bech32” and all case sensitive
            
                {
                   "address_type": "bech32"
                }
                
            </remarks>
        </member>
        <member name="M:Bitcoin.API.Controller.WalletController.AddMultisigAddress(Bitcoin.Core.Models.BitcoinCore.AddMultisigAddressRequest)">
            <remarks>
            this is also similar to createmultisig. they both return a multisig address with their redeemscript
            </remarks>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Bitcoin.API.Controller.WalletController.ImportAddress(Bitcoin.Core.Models.BitcoinCore.ImportAddressRequest)">
             <remarks>
             Arguments:
            1. address(string, required) The Bitcoin address(or hex-encoded script)
            2. label(string, optional, default="") An optional label
            3. rescan(boolean, optional, default=true) Rescan the wallet for transactions
            4. p2sh(boolean, optional, default=false) Add the P2SH version of the script as well
             </remarks>
             <param name="model"></param>
             <returns></returns>
        </member>
        <member name="M:Bitcoin.API.Controller.L2.LightningController.Invoice(Bitcoin.Core.Models.CoreLightning.InvoiceRequest)">
            <summary>
            It is possible to generate an invoice without specifyng any amount. 
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
    </members>
</doc>
