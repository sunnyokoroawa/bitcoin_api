<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bitcoin.API</name>
    </assembly>
    <members>
        <member name="M:Bitcoin.API.Controller.BitcoinController.GetTxOut(Bitcoin.Core.Models.BitcoinCore.GetTxOutRequest)">
            <summary>
            relies on a 3rd party to get txns
            </summary>
            <param name="model"></param>
            <returns></returns>
            <summary>
            this is used to get the value of UTXO in a wallet address
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Bitcoin.API.Controller.BitcoinController.GetBlock(Bitcoin.Core.Models.BitcoinCore.GetBlockRequest)">
            <summary>
            this gets UTXOs by supplying the address
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Bitcoin.API.Controller.RawTransactionController.FundRawtransaction(Bitcoin.Core.Models.BitcoinCore.FundRawtransactionRequest)">
            <remarks>
            options is optional.
            Used to add inputs to a txn until its big enough to meet the value of all its output.
            https://chainquery.com/bitcoin-cli/fundrawtransaction
            </remarks>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Bitcoin.API.Controller.WalletController.GetTransaction(Bitcoin.Core.Models.BitcoinCore.GetTransactionRequest)">
            <summary>
            getTransaction only works for txns treated from your own node. The Bitcoin Core desktop
            wallet does not store the whole txns, it only stores txns done on the node (inflows and outflows) in
            the system's memory.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Bitcoin.API.Controller.WalletController.GetRawChangeAddress(Bitcoin.Core.Models.BitcoinCore.GetRawChangeAddressRequest)">
            <remarks>
            address_type: “legacy”, “p2sh-segwit”, and “bech32” and all case sensitive
            
                {
                   "address_type": "bech32"
                }
                
            </remarks>
        </member>
        <member name="M:Bitcoin.API.Controller.WalletController.AddMultisigAddress(Bitcoin.Core.Models.BitcoinCore.AddMultisigAddressRequest)">
            <remarks>
            this is also similar to createmultisig. they both return a multisig address with their redeemscript
            </remarks>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Bitcoin.API.Controller.WalletController.ImportAddress(Bitcoin.Core.Models.BitcoinCore.ImportAddressRequest)">
             <remarks>
             Arguments:
            1. address(string, required) The Bitcoin address(or hex-encoded script)
            2. label(string, optional, default="") An optional label
            3. rescan(boolean, optional, default=true) Rescan the wallet for transactions
            4. p2sh(boolean, optional, default=false) Add the P2SH version of the script as well
             </remarks>
             <param name="model"></param>
             <returns></returns>
        </member>
    </members>
</doc>
